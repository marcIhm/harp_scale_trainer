{
    //
    //  See the usage-message of 'harpwise jamming' for instructions on how to use this
    //  file.
    //

    // Note the '-q', which makes sure, that play (sox) does not try to print
    // anything. Also, the clause '%{install_dir}' refers to the installation-directory of
    // harpwise, which (among others) contains the given mp3
    "play_command": "play -q %{install_dir}/recordings/12bar.mp3",
    "comment": "A 12-bar backing-track of 334 sec and the 3-lick set 'box1'. Each of the licks is one bar long, and matches one of chords I,IV,V. Play each lick as long as it is displayed, e.g. play the first lick four times, then the second lick two times, etc. Note, that always the current, matching chord (scale) is highlighted in the harmonica-chart to hint on holes for improvisation. Play either with a mic or use earphones to help harpwise sense your playing even in the accustic presence of the backing track.",
    // hint for user on how to start harpwise
    "example_harpwise": "harpwise listen c --sc-prog 12bar --lick-prog box1 --jamming",
    // global stretch (> 1) or compress (< 1) all timestamps; use this e.g. if you have
    // slowed down the backing track 
    "timestamps_multiply": 1.0,
    // globally add to all timestamps; use this e.g. if you want to
    // read the next lick with some forerun
    "timestamps_add": 0.0,
    // maybe give some extra time to grab your harp before anything starts
    "sleep_initially": 2.0,
    // use this, if actions and music tend to drift; can be negative too (in which
    // case it is just subtracted to last timestamp)
    "sleep_after_iteration": 0.5,
    // Try audacity and its text-label-feature to get the timestamps for such a list as
    // below.  Timestamps-to-actions will be repeated forever; this assumes that the
    // chord-structure of your song is regular and repeats too.  On from the second
    // iteration, only entries after "loop-start" will be used.

    // messages to be shown, may use the special variables %{comment}, %{iteration} and
    // %{elapsed} to insert the comment from this file, the count of repeats and the number
    // of seconds elapsed.
    "timestamps_to_actions": [
	// this will appear in message-area of harpwise
        [0,"message","%{comment}",0],
        [0,"keys","L","S"],
        [-2,"message","In two secs ...",1.8],
	// exactly one loop-start is needed
        [6,"loop-start","Start of iteration %{iteration}; %{elapsed} secs after start",1.8],
        [-2,"message","Chord-change in two secs ...",1.8],
	// these two keys will switch lick- and scale-progression in unison	
        [18,"keys","l","s"],
        [-2,"message","Chord-change in two secs ...",1.8],
        [24,"keys","l","s"],
        [-2,"message","Three chord-changes in two secs ...",1.8],
        [30,"keys","l","s"],
        [33,"keys","l","s"],
        [36,"keys","l","s"],
        [-2,"message","Turnaround in two secs ...",1.8],
        [42,"keys","l","s"]
    ]
}
//
//  After some practice with the backing-track 12bar.mp3 you may want to try one
//  of your own backing-track (e.g. one, that can be found on youtube).
//  For this you will need to prepare another json-file and put in the
//  filename of your new backing-track. In addition you will need to adjust timestamps.
//
//  Admittedly, preparing those timestamps needs some technical work; however, your ear and
//  good tools make this a matter of minutes. Try e.g. audacity and its feature of creating
//  and exporting text-markers.
//
